#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'models'))

from flask import Flask
from stockmann_models import db, Store, IncidentCategory, IncidentSubcategory, Incident, IncidentHistory
from datetime import datetime

def test_incident_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
    
    app = Flask(__name__)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from dotenv import load_dotenv
    load_dotenv()
    
    db_name = os.getenv('DB_NAME', 'stockmann_incidents')
    db_user = os.getenv('DB_USER', 'postgres')
    db_password = os.getenv('DB_PASSWORD', '1234')
    db_host = os.getenv('DB_HOST', 'localhost')
    db_port = os.getenv('DB_PORT', '5432')
    
    app.config['SQLALCHEMY_DATABASE_URI'] = f'postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    db.init_app(app)
    
    with app.app_context():
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            store = Store.query.first()
            category = IncidentCategory.query.first()
            subcategory = IncidentSubcategory.query.first()
            
            if not store or not category:
                print("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")
                return False
            
            print(f"üìç –ú–∞–≥–∞–∑–∏–Ω: {store.code} - {store.name}")
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
            if subcategory:
                print(f"üìã –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory.name} (SLA: {subcategory.sla_hours}—á)")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            current_year = datetime.now().year
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –≥–æ–¥–∞
            last_incident = db.session.query(Incident).filter(
                Incident.incident_number.like(f"{store.code}-{current_year}-%")
            ).order_by(Incident.incident_number.desc()).first()
            
            if last_incident and last_incident.incident_number:
                parts = last_incident.incident_number.split('-')
                if len(parts) >= 3:
                    try:
                        last_num = int(parts[-1])
                        next_num = last_num + 1
                    except ValueError:
                        next_num = 1
                else:
                    next_num = 1
            else:
                next_num = 1
            
            incident_number = f"{store.code}-{current_year}-{next_num:04d}"
            print(f"üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {incident_number}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
            incident = Incident(
                incident_number=incident_number,
                title="–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç",
                description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã",
                category_id=category.id,
                subcategory_id=subcategory.id if subcategory else None,
                priority='medium',
                severity='minor',
                store_id=store.id,
                reporter_id=1,
                customer_affected=False,
                source='manual'
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —è–≤–Ω–æ
            incident.created_at = datetime.utcnow()
            incident.updated_at = datetime.utcnow()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SLA
            if subcategory:
                from datetime import timedelta
                incident.sla_deadline = incident.created_at + timedelta(hours=subcategory.sla_hours)
            
            db.session.add(incident)
            db.session.commit()
            
            print(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {incident.id}")
            print(f"üìÖ –°–æ–∑–¥–∞–Ω: {incident.created_at}")
            if incident.sla_deadline:
                print(f"‚è∞ SLA –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: {incident.sla_deadline}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
            history = IncidentHistory(
                incident_id=incident.id,
                changed_by=1,
                field_name='status',
                old_value=None,
                new_value='new',
                change_reason='–ò–Ω—Ü–∏–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (—Ç–µ—Å—Ç)'
            )
            db.session.add(history)
            db.session.commit()
            
            print("üìù –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç
            created_incident = Incident.query.get(incident.id)
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:")
            print(f"   –ù–æ–º–µ—Ä: {created_incident.incident_number}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {created_incident.title}")
            print(f"   –°—Ç–∞—Ç—É—Å: {created_incident.status}")
            print(f"   –ú–∞–≥–∞–∑–∏–Ω: {created_incident.store.name}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {created_incident.category.name}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞: {e}")
            db.session.rollback()
            return False

if __name__ == '__main__':
    success = test_incident_creation()
    sys.exit(0 if success else 1)